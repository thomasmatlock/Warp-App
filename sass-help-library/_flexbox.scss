/* https: //www.w3schools.com/cssref */
/* https: //developer.mozilla.org/en-US/docs/Web/CSS/flex */

///// FLEXBOX
// (all properties apply to parent container, except flex-shrink and beyond apply to child items of flex containers)
display: flex; // display: flex to an element turns it into a flex container. This makes it possible to align any children of that element into rows or columns. You do this by adding the flex-direction property to the parent item and setting it to row or column.

/// SPECIFY direction of flex items, row or column
flex-direction: row; // align the children horizontally
flex-direction: row-reverse; // align the children horizontally in reverse order
flex-direction: column; //align the children vertically
flex-direction: column-reverse; // align the children vertically in reverse order

/*ALIGNS items along main axis*/
justify-content: center; // Pack items around the center
justify-content: start; // Pack items from the start
justify-content: end; // Pack items from the end
justify-content: flex-start; // Pack flex items from the start
justify-content: flex-end; // Pack flex items from the end
justify-content: left; // Pack items from the left
justify-content: right; // Pack items from the right

/*ALIGNS items along cross axis*/
align-items: flex-start; // aligns items to the start of the flex container. For rows, this aligns items to the top of the container. For columns, this aligns items to the left of the container.
align-items: flex-end; // aligns items to the end of the flex container. For rows, this aligns items to the bottom of the container. For columns, this aligns items to the right of the container.
align-items: center; // align items to the center. For rows, this vertically aligns items (equal space above and below the items). For columns, this horizontally aligns them (equal space to the left and right of the items).
align-items: stretch; // stretch the items to fill the flex container. For example, rows items are stretched to fill the flex container top-to-bottom. This is the default value if no align-items value is specified.
align-items: baseline; // align items to their baselines. Baseline is a text concept, think of it as the line that the letters sit on.

/* flex-wrap 
CSS flexbox has a feature to split a flex item into multiple rows (or columns).
By default, a flex container will fit all flex items together. For example, a row will all be on one line.
However, using the flex-wrap property tells CSS to wrap items. This means extra items move into a new row or column.
The break point of where the wrapping happens depends on the size of the items and the size of the container.
CSS also has options for the direction of the wrap:
*/

flex-wrap: nowrap; // this is the default setting, and does not wrap items.
flex-wrap: wrap; // wraps items from left-to-right if they are in a row, or top-to-bottom if they are in a column.
flex-wrap: wrap-reverse; // wraps items from right-to-left if they are in a row, or bottom-to-top if they are in a column.

/* flex-shrink
So far, all the properties in the challenges apply to the flex container (the parent of the flex items). However, there are several useful properties for the flex items.

The first is the flex-shrink property. When it's used, it allows an item to shrink if the flex container is too small.
Items shrink when the width of the parent container is smaller than the combined widths of all the flex items within it.

The flex-shrink property takes numbers as values. The higher the number, the more it will shrink compared to the other items in the container.
For example, if one item has a flex-shrink value of 1 and the other has a flex-shrink value of 3, the one with the value of 3 will shrink three times as much as the other.
*/

flex-shrink: 1; // actually shrinks shrink 2x as much as the other items shrink
flex-shrink: 2; // will shrink 2x as much as the other items shrink

/* flex-grow
The opposite of flex-shrink is the flex-grow property. Recall that flex-shrink controls the size of the items when the container shrinks.
The flex-grow property controls the size of items when the parent container expands.

Using a similar example from the last challenge, if one item has a flex-grow value of 1 and the other has a flex-grow value of 3, the one with the value of 3 will grow three times as much as the other.
*/

flex-grow: 1; // this does nothing except grow item 50%, or 100% if other child item flex-grow values are left unspecified
flex-grow: 2; // this item will grow 2x as much as the others if parent container expands

/* flex-basis 
The flex-basis property specifies the initial size of the item before CSS makes adjustments with flex-shrink or flex-grow.

The units used by the flex-basis property are the same as other size properties (px, em, %, etc.). The value auto sizes items based on the content.
*/

flex-basis: 10em;
flex-basis: 20rem;
flex-basis: 75px;

/* flex Shorthand Property (set flex values all at once on child items)
There is a shortcut available to set several flex properties at once. The flex-grow, flex-shrink, and flex-basis properties can all be set together by using the flex property.

For example, flex: 1 0 10px; will set the item to flex-grow: 1;, flex-shrink: 0;, and flex-basis: 10px;.

The default property settings are flex: 0 1 auto;.
*/

flex: 0 1 auto; // flex-grow: 1;, flex-shrink: 0;, and flex-basis: 10px

/* order (manually order child items rather than the html order)
The order property is used to tell CSS the order of how flex items appear in the flex container.
By default, items will appear in the same order they come in the source HTML. The property takes numbers as values, and negative numbers can be used.
*/

order: 2; // if this child element is first, eg, you could use this to make it appear second
order: 1; // if this child element is second or third, eg, you could use this to make it appkear 1st, or whatever

/* align-self (align items manually, rather than using the parent to align the children all the same
The final property for flex items is align-self. This property allows you to adjust each item's alignment individually, instead of setting them all at once.
This is useful since other common adjustment techniques using the CSS properties float, clear, and vertical-align do not work on flex items.

align-self accepts the same values as align-items and will override any value set by the align-items property.
*/

align-self: center; // aligns item at center of row or center of column
align-self: flex-end; // aligns items at bottom of row, or whatever in a column.
