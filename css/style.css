@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0);
    /*putting zero basically places elements how it looks normally
    above we just offset the starting keyframes by translating it over */ } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translateY(0);
    /*putting zero basically places elements how it looks normally
    above we just offset the starting keyframes by translating it over */ } }

/* * is universal selector for everything on your page, it applies all block rules to everything inside it*/
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
  /*we set this to border-box in body, so then here we ensure every el inherits that unless we specify otherwise*/ }

html {
  font-size: 62.5%;
  /* 1 rem = exactly 10px. Very useful for scaling everything else on page in rem*/
  /*important step2: users often set their own font size, so writing 10px as default font-size is bad practice, so we use percentages
  default font-size is 16px, so 100% would be 16px
  so we want 10px, default is 16, we divide 10 by the 16, and our percentage is 62.5%*/ }

body {
  box-sizing: border-box; }

body {
  font-family: "Nunito", sans-serif;
  overflow: hidden; }

h1 {
  font-family: "Century Gothic", "Lato", sans-serif;
  animation: moveInLeft 1s ease-out; }

h3 {
  font-family: "Nunito", sans-serif;
  animation: moveInRight 1s ease-out; }

a {
  text-decoration: none;
  font-size: 2rem; }

li {
  font-size: 1.5rem; }

/*
// CODEPEN HTML
<div class="container">
  <a class="btn btn-1">Hover me</a>
  <a class="btn btn-2">Hover me</a>
  <a class="btn btn-3">Hover me</a> 
  <a class="btn btn-4">Hover me</a> 
  <a class="btn btn-5">Hover me</a>
</div>
*/
/*
.container {
    display: flex;
    justify-content: center;
    align-items: center;
    align-content: center;
    flex-wrap: wrap;
    width: 80vw;
    margin: 0 auto;
    min-height: 100vh;
}
*/
.btn {
  flex: 1 1 auto;
  margin: 10px;
  padding: 30px;
  text-align: center;
  text-transform: uppercase;
  transition: 0.5s;
  background-size: 200% auto;
  color: white;
  /* text-shadow: 0px 0px 10px rgba(0,0,0,0.2);*/
  box-shadow: 0 0 20px #eee;
  border-radius: 10px;
  transition: all 0.1s ease; }
  .btn::hover {
    background-position: right center;
    /* change the direction of the change here */ }

.btn-1 {
  background-image: linear-gradient(to right, #f6d365 0%, #fda085 51%, #f6d365 100%); }

.btn-2 {
  background-image: linear-gradient(to right, #fbc2eb 0%, #a6c1ee 51%, #fbc2eb 100%); }

.btn-3 {
  background-image: linear-gradient(to right, #84fab0 0%, #8fd3f4 51%, #84fab0 100%); }

.btn-4 {
  background-image: linear-gradient(to right, #a1c4fd 0%, #c2e9fb 51%, #a1c4fd 100%); }

.btn-5 {
  background-image: linear-gradient(to right, #ffecd2 0%, #fcb69f 51%, #ffecd2 100%); }

.header {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 0px;
  background: #ffb900; }

.primary-nav-tabs {
  display: flex;
  flex-direction: row;
  justify-content: center;
  position: fixed;
  top: 0;
  width: 60%;
  height: 60px;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
  z-index: 10;
  background-color: #fff; }

.primary-nav-tab {
  display: flex;
  justify-content: center;
  align-items: center;
  flex: 1 2;
  color: #000;
  font-size: 1.8rem;
  letter-spacing: 0.1rem;
  transition: all 0.25s ease; }
  .primary-nav-tab:hover {
    color: white;
    background: rgba(102, 177, 241, 0.8);
    background-position: right center;
    transform: scale(1.05);
    transition: all 0.25s ease;
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2); }

.secondary-nav-tabs {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 0px;
  position: relative;
  background: #7ed56f;
  text-align: center;
  padding: 0 2em;
  /*
    h1 {
        font-size: 3rem;
        margin: 0;
        letter-spacing: 1rem;
    }

    h3 {
        font-size: 1rem;
        letter-spacing: 0.3rem;
        opacity: 1;
    }
    */ }

.secondary-nav-tabs-container {
  display: flex;
  flex-direction: row;
  position: absolute;
  width: 40%;
  height: 60px;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
  background: #eee;
  z-index: 1;
  position: fixed;
  top: 60px;
  border-radius: 0 0 5px 5px; }

.secondary-nav-tab {
  display: flex;
  justify-content: center;
  align-items: center;
  flex: 1;
  color: #000;
  letter-spacing: 0.1rem;
  transition: all 0.1s ease;
  font-size: 1.8rem; }
  .secondary-nav-tab:hover {
    color: white;
    background: rgba(102, 177, 241, 0.8); }

.secondary-nav-tab-slider {
  position: absolute;
  bottom: 0;
  width: 0;
  height: 6px;
  background: #66b1f1;
  transition: left 0.3s ease; }

.content {
  height: 100vh;
  max-width: 90%;
  margin: 60px auto;
  background-color: #fff;
  border-radius: 6px;
  overflow: hidden;
  box-shadow: 0 2rem 6rem 0.5rem rgba(101, 90, 86, 0.2);
  background-image: linear-gradient(to right, #a1c4fd 0%, #c2e9fb 51%, #a1c4fd 100%);
  display: grid;
  grid-template-rows: 10rem minmax(100rem, auto);
  /*
    You also have access to a function which can help set boundaries for otherwise flexible units.
    For example to set a column to be 1fr, but shrink no further than 200px:
    grid-template-columns: 1fr minmax(200px, 1fr);
    */
  grid-template-columns: 1.1fr 2fr 1.1fr;
  grid-template-areas: "head head head" "list recipe shopping";
  /*
    https://css-tricks.com/snippets/css/complete-guide-grid/
    .container {
  display: grid;
  grid-template-columns: 50px 50px 50px 50px;
  grid-template-rows: auto;
  grid-template-areas: 
    "header header header header"
    "main main . sidebar"
    "footer footer footer footer";
    }
    */ }

.content__list {
  list-style: none; }

.content__link:link,
.content__link:visited {
  background-color: red;
  display: flex;
  width: 100%;
  align-items: center;
  padding: 1.5rem 3rem;
  transition: all 0.3s;
  border-right: 1px solid #fff;
  text-decoration: none;
  border-radius: 6px; }

.content__link:hover {
  background-color: #f9f5f3;
  transform: translateY(-2px); }

.row {
  max-width: 114rem;
  background-color: transparent;
  margin: 0 auto;
  /*
    &:last-child {
        margin-bottom: 0px;
    }
    */ }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    float: left;
    background-color: transparent; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc(((100% - 2 * 6rem) / 3) * 2 + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }
  .row .col-2-of-4 {
    width: calc(((100% - 3 * 6rem) / 4) * 2 + (6rem)); }
  .row .col-3-of-4 {
    width: calc(((100% - 3 * 6rem) / 4) * 3 + (6rem * 2)); }
